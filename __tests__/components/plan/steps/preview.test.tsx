/**
 * @jest-environment jsdom
 */
import React from 'react'
import { render, screen } from '@testing-library/react'
import { PlanFormProvider } from '@/contexts/plan-form-context'
import { PreviewStep } from '@/components/plan/steps/preview'

// LocalStorage„ÅÆ„É¢„ÉÉ„ÇØ
const localStorageMock = (() => {
  let store: Record<string, string> = {}

  return {
    getItem: (key: string) => store[key] || null,
    setItem: (key: string, value: string) => {
      store[key] = value.toString()
    },
    removeItem: (key: string) => {
      delete store[key]
    },
    clear: () => {
      store = {}
    },
  }
})()

Object.defineProperty(window, 'localStorage', {
  value: localStorageMock,
})

describe('PreviewStep', () => {
  beforeEach(() => {
    localStorageMock.clear()
    jest.spyOn(console, 'log').mockImplementation()
    jest.spyOn(console, 'error').mockImplementation()
  })

  afterEach(() => {
    jest.restoreAllMocks()
  })

  describe('Âü∫Êú¨Ë°®Á§∫', () => {
    it('„Çø„Ç§„Éà„É´„Å®Ë™¨Êòé„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      expect(screen.getByText('üëÄ „Éó„É¨„Éì„É•„Éº')).toBeInTheDocument()
      expect(screen.getByText('ÂÖ•ÂäõÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ')).toBeInTheDocument()
    })

    it('ÂÆüË£Ö‰∫àÂÆö„É°„ÉÉ„Çª„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      expect(
        screen.getByText(/Ë©≥Á¥∞„Å™„Éó„É¨„Éì„É•„ÉºË°®Á§∫ÔºàÂú∞Âõ≥„Éª„É´„Éº„ÉàÁ≠âÔºâ„ÅØÂà•issue„ÅßÂÆüË£Ö‰∫àÂÆö„Åß„Åô/)
      ).toBeInTheDocument()
    })

    it('ÂêÑ„Çª„ÇØ„Ç∑„Éß„É≥„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      expect(screen.getByText('üìÖ Êó•Á®ã')).toBeInTheDocument()
      expect(screen.getByText('üóæ „Ç®„É™„Ç¢')).toBeInTheDocument()
      expect(screen.getByText('üìç „Çπ„Éù„ÉÉ„Éà')).toBeInTheDocument()
    })
  })

  describe('Êó•Á®ã„ÅÆË°®Á§∫', () => {
    it('Êó•Á®ã„ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÄÅ„ÄåÊú™Ë®≠ÂÆö„Äç„Å®Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      const sections = screen.getAllByText('Êú™Ë®≠ÂÆö')
      expect(sections.length).toBeGreaterThan(0)
    })

    it('Êó•Á®ã„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅÊó•‰ªò„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const savedData = {
        startDate: '2025-12-01T00:00:00.000Z',
        endDate: '2025-12-05T00:00:00.000Z',
        region: null,
        prefecture: null,
        selectedSpots: [],
        customSpots: [],
        currentStep: 4,
        isComplete: false,
      }
      localStorageMock.setItem('planFormData', JSON.stringify(savedData))

      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      // Êó•‰ªò„ÅåË°®Á§∫„Åï„Çå„Çã
      expect(screen.getByText(/2025\/12\/1/)).toBeInTheDocument()
      expect(screen.getByText(/2025\/12\/5/)).toBeInTheDocument()
    })
  })

  describe('„Ç®„É™„Ç¢„ÅÆË°®Á§∫', () => {
    it('„Ç®„É™„Ç¢„ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÄÅ„ÄåÊú™Ë®≠ÂÆö„Äç„Å®Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      const sections = screen.getAllByText('Êú™Ë®≠ÂÆö')
      expect(sections.length).toBeGreaterThan(0)
    })

    it('„Ç®„É™„Ç¢„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅÂú∞Êñπ„Å®ÈÉΩÈÅìÂ∫úÁúå„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const savedData = {
        startDate: null,
        endDate: null,
        region: 'kanto',
        prefecture: 'Êù±‰∫¨ÈÉΩ',
        selectedSpots: [],
        customSpots: [],
        currentStep: 4,
        isComplete: false,
      }
      localStorageMock.setItem('planFormData', JSON.stringify(savedData))

      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      expect(screen.getByText(/kanto - Êù±‰∫¨ÈÉΩ/)).toBeInTheDocument()
    })
  })

  describe('„Çπ„Éù„ÉÉ„Éà„ÅÆË°®Á§∫', () => {
    it('„Çπ„Éù„ÉÉ„Éà„ÅåÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÄÅ0‰ª∂„Å®Ë°®Á§∫„Åï„Çå„Çã', () => {
      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      expect(screen.getByText(/ÈÅ∏ÊäûÊ∏à„Åø: 0‰ª∂/)).toBeInTheDocument()
      expect(screen.getByText(/„Ç´„Çπ„Çø„É†: 0‰ª∂/)).toBeInTheDocument()
    })

    it('„Çπ„Éù„ÉÉ„Éà„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅ‰ª∂Êï∞„ÅåË°®Á§∫„Åï„Çå„Çã', () => {
      const savedData = {
        startDate: null,
        endDate: null,
        region: null,
        prefecture: null,
        selectedSpots: ['spot1', 'spot2', 'spot3'],
        customSpots: ['custom1'],
        currentStep: 4,
        isComplete: false,
      }
      localStorageMock.setItem('planFormData', JSON.stringify(savedData))

      render(
        <PlanFormProvider>
          <PreviewStep />
        </PlanFormProvider>
      )

      expect(screen.getByText(/ÈÅ∏ÊäûÊ∏à„Åø: 3‰ª∂/)).toBeInTheDocument()
      expect(screen.getByText(/„Ç´„Çπ„Çø„É†: 1‰ª∂/)).toBeInTheDocument()
    })
  })
})
